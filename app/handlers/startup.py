from aiogram import Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, FSInputFile, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from app.services import db_service
from app.services.db_service import ASK_LIMIT, PDF_LIMIT, LIMIT_RESET_DAYS
import os
import logging
from aiogram.fsm.context import FSMContext
from .states import FeedbackStates
from aiogram import F

router = Router()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@router.message(CommandStart())  # Handler for /start command
async def cmd_start(message: Message):
    user = message.from_user
    logger.info(f"[START] User {user.id} started bot. Username: {user.username}")
    db_service.add_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name,
    )
    
    # Compose welcome message text
    welcome_text = (
        "<b>–ü—Ä–∏–≤–µ—Ç! üëã</b>\n"
        "–Ø ‚Äî —Ç–≤–æ–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫. –ü–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∏ —É–ª—É—á—à–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≥—Ä–∞–Ω—Ç "
        "¬´–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π –°—Ç–∞—Ä—Ç–∞–ø¬ª –æ—Ç –§–°–ò. –Ø –Ω–µ —è–≤–ª—è—é—Å—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –§–°–ò, –º–æ–∏ —Å–æ–≤–µ—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –ª–∏—á–Ω–æ–º –æ–ø—ã—Ç–µ @theother_archeee.\n\n"
        
        "<b>‚úÖ –Ø —É–º–µ—é –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∑–∞—è–≤–∫–∏:</b>\n"
        "‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä—é –∑–∞—è–≤–∫—É –Ω–∞ –æ—à–∏–±–∫–∏ –∏ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è\n"
        "‚úîÔ∏è –î–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ç–µ–∫—Å—Ç–∞\n"
        "‚úîÔ∏è –ü–æ–¥—Å–∫–∞–∂—É, –∫–∞–∫ –ø–æ–≤—ã—Å–∏—Ç—å —à–∞–Ω—Å—ã –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ\n\n"
        
        "<b>‚úÖ –Ø —É–º–µ—é –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≥—Ä–∞–Ω—Ç—É:</b>\n"
        "‚úîÔ∏è –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "‚úîÔ∏è –í–æ–ø—Ä–æ—Å—ã –ø–æ –∑–∞—è–≤–∫–µ\n\n"
        
        "<i>–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –¥–ª—è —Ç–µ–±—è –æ–ø—Ü–∏—é –Ω–∏–∂–µ:</i>\n"
        f"(–±–µ—Å–ø–ª–∞—Ç–Ω–æ: {ASK_LIMIT} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ {PDF_LIMIT} –ø—Ä–æ–≤–µ—Ä–∫–∏ PDF –∫–∞–∂–¥—ã–µ {LIMIT_RESET_DAYS} –¥–Ω—è)\n\n"
        
        "<b>üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>\n"
        "/start ‚Äî –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help ‚Äî –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/ask ‚Äî –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
        "/check ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—è–≤–∫—É –≤ PDF\n"
        "/useful ‚Äî –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
        "/privacy ‚Äî –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
    )
    
    logger.debug(f"[START] Welcome text: {welcome_text}")
    try:
        # List of photos to send in one message
        photo_paths = [
            "static/photos/Stud-startup-bot-1.jpg",
            "static/photos/Stud-startup-bot-2.jpg",
            "static/photos/Stud-startup-bot-3.jpg",
            "static/photos/Stud-startup-bot-4.jpg",
            "static/photos/Stud-startup-bot-5.jpg",
            "static/photos/Stud-startup-bot-6.jpg",
            "static/photos/Stud-startup-bot-7.jpg",
            "static/photos/Stud-startup-bot-8.jpg",
            "static/photos/Stud-startup-bot-9.jpg"
            
        ]
        logger.debug(f"[START] Photo paths: {photo_paths}")
        
        # Create a list of media objects for group sending
        media_group = []
        
        # Check if files exist
        for i, photo_path in enumerate(photo_paths):
            if os.path.exists(photo_path):
                # First photo with caption, others without
                caption = welcome_text if i == 0 else None
                media_group.append({
                    "type": "photo",
                    "media": FSInputFile(photo_path),
                    "caption": caption,
                    "parse_mode": "HTML" if caption else None
                })
            else:
                logger.info(f"[START] File not found: {photo_path}")
        
        logger.debug(f"[START] Media group length: {len(media_group)}")
        # Send group of photos in one message
        if media_group:
            await message.answer_media_group(media=media_group)
        else:
            # If no photos, send only text
            await message.answer(welcome_text, parse_mode="HTML")
    
    except Exception as e:
        logger.error(f"[START] Error sending photos: {e}")
        # In case of error, send only text
        await message.answer(welcome_text, parse_mode="HTML")

@router.message(Command("privacy"))
async def privacy_policy_startup(message: Message):
    logger.info(f"[PRIVACY] User {message.from_user.id} requested privacy policy.")
    pdf_paths = [
        "static/privacy/privacy_policy_stud_startup_bot.pdf",
        "static/privacy/user_agreement_stud_startup_bot.pdf"
    ]
    logger.debug(f"[PRIVACY] PDF paths: {pdf_paths}")
    media_group = [
        {
            "type": "document",
            "media": FSInputFile(pdf_paths[0]),
            "caption": "–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"
        },
        {
            "type": "document",
            "media": FSInputFile(pdf_paths[1]),
            "caption": "–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
        }
    ]
    await message.answer_media_group(media=media_group)
    response_text = (
     "<b>üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>\n"
        "/start ‚Äî –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help ‚Äî –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/ask ‚Äî –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
        "/check ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—è–≤–∫—É –≤ PDF\n"
        "/useful ‚Äî –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
    )
    await message.answer(response_text, parse_mode="HTML")

@router.message(Command("useful"))
async def useful_startup(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"[USEFUL_DATA] User {user_id} requested useful materials.")
    
    text = (
        "<b>–í—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–∞ —Ç–µ–º—É –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∞–Ω—Ç–∞ –°—Ç—É–¥. –°—Ç–∞—Ä—Ç–∞–ø:</b>\n"
        "üìπ –°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ YouTube ‚Äî <a href='https://youtu.be/Q2iyGM5aqME?si=JoqM3bGEW4iPt_7l'>—Å—Å—ã–ª–∫–∞</a>\n"
        "üí¨ –°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ VK –í–∏–¥–µ–æ ‚Äî <a href='https://vkvideo.ru/video-230151407_456239017'>—Å—Å—ã–ª–∫–∞</a>\n"
        "üìë –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Å –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è ‚Äî <a href='https://t.me/theother_channel/63'>—Å—Å—ã–ª–∫–∞</a>\n\n"
    )
    
    # Get current user limits to show in the command list
    ask_count, pdf_used = db_service.get_user_limits(user_id)
    ask_remaining = max(0, ASK_LIMIT - ask_count)
    pdf_remaining = max(0, PDF_LIMIT - pdf_used)
    hours_until_reset = db_service.get_time_until_reset(user_id)
    reset_text = f"‚è∞ –õ–∏–º–∏—Ç—ã —Å–±—Ä–æ—Å—è—Ç—Å—è —á–µ—Ä–µ–∑ {hours_until_reset} —á." if hours_until_reset else f"‚è∞ –õ–∏–º–∏—Ç—ã —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–µ {LIMIT_RESET_DAYS} –¥–Ω—è."
    
    # Command list with updated limit information
    commands = (
        "<b>üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>\n"
        "/start ‚Äî –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help ‚Äî –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/ask ‚Äî –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
        "/check ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—è–≤–∫—É –≤ PDF\n"
        "/useful ‚Äî –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
        "/privacy ‚Äî –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
        
        f"üí¨ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {ask_remaining} –∏–∑ {ASK_LIMIT} –≤–æ–ø—Ä–æ—Å–æ–≤\n"
        f"üìÑ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {pdf_remaining} –∏–∑ {PDF_LIMIT} –ø—Ä–æ–≤–µ—Ä–æ–∫ PDF\n\n"
        
        f"{reset_text}"
    )
    
    # Send message with useful materials and commands
    await message.answer(text, parse_mode="HTML")
    await message.answer(commands, parse_mode="HTML")

    logger.info(f"[USEFUL_DATA] Sent useful materials to user {user_id}")
