from app.services.openai_service import ask_openai, ask_deepseek
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from pdfplumber import open as pdf_open
from aiogram.fsm.context import FSMContext
from .states import AskStates, CheckStates    # üëà –Ω–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
from app.services import db_service
from app.services.db_service import ASK_LIMIT, PDF_LIMIT, LIMIT_RESET_DAYS
from aiogram.filters import StateFilter
from aiogram.fsm.state import default_state
import os
from datetime import datetime

router = Router()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /check ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(Command("check"))
async def start_check(message: Message, state: FSMContext):
    await message.answer(
        "–ü—Ä–∏—à–ª–∏—Ç–µ PDF‚Äë—Ñ–∞–π–ª –∑–∞—è–≤–∫–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. /cancel ‚Äî –æ—Ç–º–µ–Ω–∞"
    )
    await state.set_state(CheckStates.waiting_for_pdf)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø–æ–ª—É—á–∞–µ–º PDF, –µ—Å–ª–∏ –∂–¥—ë–º –µ–≥–æ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(CheckStates.waiting_for_pdf,
                lambda m: m.document and m.document.mime_type == "application/pdf")
async def process_pdf(message: Message, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
    processing_msg = await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª, –ø–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶")
    
    user_id = message.from_user.id

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
    _, pdf_used = db_service.get_user_limits(user_id)
    if pdf_used >= PDF_LIMIT:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –¥–æ —Å–±—Ä–æ—Å–∞
        hours_until_reset = db_service.get_time_until_reset(user_id)
        reset_text = f"—á–µ—Ä–µ–∑ {hours_until_reset} —á" if hours_until_reset else f"—á–µ—Ä–µ–∑ {LIMIT_RESET_DAYS*24} —á–∞—Å–æ–≤."
        
        # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
        await processing_msg.edit_text(f"–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ {PDF_LIMIT} –ø—Ä–æ–≤–µ—Ä–∫–∏ PDF. "
                             f"–í–∞—à –ª–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è {reset_text}. "
                             f"–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ @theother_archeee –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.")
        return

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs("application_files", exist_ok=True)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏
    current_time = datetime.now().strftime("%Y%m%d_%H%M%S")
    file_name = f"id{user_id}_pdf_{current_time}.pdf"
    file_path = os.path.join("application_files", file_name)
    
    # 1) —Å–∫–∞—á–∏–≤–∞–µ–º
    file = await message.bot.get_file(message.document.file_id)
    pdf_bytes = await message.bot.download_file(file.file_path)
    with open(file_path, "wb") as f:
        f.write(pdf_bytes.getvalue())

    # 2) –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ç–µ–∫—Å—Ç
    raw_text = extract_text_from_pdf(file_path)
    clean_text = clean_pdf_text(raw_text)

    # 3) —Å–ø—Ä–∞—à–∏–≤–∞–µ–º Deepseek
    html_answer = await ask_deepseek(clean_text, message)

    # 4) –ø–æ—Å—Ç‚Äë–æ–±—Ä–∞–±–æ—Ç–∫–∞ (—É–¥–∞–ª—è–µ–º —Ç–µ–≥–∏, –Ω–µ –ø–æ–¥–¥–µ—Ä–∂. Telegram)
    html_safe = sanitize_html(html_answer)

    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –æ—Ç –º–æ–¥–µ–ª–∏
    try:
        await processing_msg.edit_text(html_safe, parse_mode="HTML")
    except Exception:
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∏–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º,
        # —É–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await processing_msg.delete()
        await message.answer(html_safe, parse_mode="HTML")
    
    db_service.mark_pdf_used(user_id)
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ PDF
    ask_count, pdf_used = db_service.get_user_limits(user_id)
    ask_remaining = max(0, ASK_LIMIT - ask_count)
    pdf_remaining = max(0, PDF_LIMIT - pdf_used)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –¥–æ —Å–±—Ä–æ—Å–∞
    hours_until_reset = db_service.get_time_until_reset(user_id)
    reset_text = f"‚è∞ –õ–∏–º–∏—Ç—ã —Å–±—Ä–æ—Å—è—Ç—Å—è —á–µ—Ä–µ–∑ {hours_until_reset} —á." if hours_until_reset else f"‚è∞ –õ–∏–º–∏—Ç—ã —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–µ {LIMIT_RESET_DAYS} –¥–Ω—è."
    
    commands_text = (
        "üìã <b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>\n"
        "/ask ‚Äî –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
        "/check ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥—É—é –∑–∞—è–≤–∫—É\n"
        "/help ‚Äî –î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã\n\n"
        
        f"üí¨ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {ask_remaining} –∏–∑ {ASK_LIMIT} –≤–æ–ø—Ä–æ—Å–æ–≤\n"
        f"üìÑ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {pdf_remaining} –∏–∑ {PDF_LIMIT} –ø—Ä–æ–≤–µ—Ä–æ–∫ PDF\n\n"
        
        f"{reset_text}"
    )
    
    await message.answer(commands_text, parse_mode="HTML")

# -------- –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ --------
ALLOWED_TAGS = {"b", "i", "blockquote"}

def sanitize_html(text: str) -> str:
    """
    –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ <b>, <i>, <blockquote>.
    –ü–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫–∏ ‚Äî –æ–±—ã—á–Ω—ã–π \\n.
    """
    # <ul><li> => ‚Ä¢ –ø—É–Ω–∫—Ç \\n
    text = text.replace("<ul>", "").replace("</ul>", "") \
               .replace("</li>", "\n").replace("<li>", "‚Ä¢ ")

    # <p> ‚Üí –¥–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏
    text = text.replace("</p>", "\n\n").replace("<p>", "")

    # <br> ‚Üí –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏
    text = text.replace("<br>", "\n").replace("<br/>", "\n")

    import re
    def _keep(m):
        tag = m.group(1).lower()
        return m.group(0) if tag in ALLOWED_TAGS else ""
    cleaned = re.sub(r"</?([a-zA-Z0-9]+)[^>]*>", _keep, text)

    # —Ç–µ–ª–µ–≥—Ä–∞–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—Ä—è–¥ \n ‚Äî –º–æ–∂–Ω–æ —Å–∂–∞—Ç—å
    return re.sub(r"\n{3,}", "\n\n", cleaned).strip()

def extract_text_from_pdf(file_path: str) -> str:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF"""
    with pdf_open(file_path) as pdf:
        text = ''
        for page in pdf.pages:
            text += page.extract_text()  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    return text

def clean_pdf_text(text: str) -> str:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤"""
    sections_to_remove = ["–î–ê–ù–ù–´–ï –û–ë –£–ß–ê–°–¢–ù–ò–ö–ï", "–û–ü–´–¢ –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø –ó–ê–Ø–í–ò–¢–ï–õ–Ø –° –î–†–£–ì–ò–ú–ò –ò–ù–°–¢–ò–¢–£–¢–ê–ú–ò –†–ê–ó–í–ò–¢–ò–Ø"]
    for section in sections_to_remove:
        text = text.replace(section, "")  # –£–¥–∞–ª—è–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
    return text

# def format_html(response: str) -> str:
#     """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ HTML-—Ä–∞–∑–º–µ—Ç–∫—É –∏ —É–±–∏—Ä–∞–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–µ–≥–∏"""
#     # –ó–∞–º–µ–Ω—è–µ–º ** –Ω–∞ <b> –∏ –¥—Ä—É–≥–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–µ–≥–∏
#     response = response.replace("**", "<b>").replace("</b>", "</b>")
#     response = response.replace("- ", "<ul><li>").replace("\n", "</li></ul>")
#     response = response.replace("<p>", "").replace("</p>", "")  # –£–±–∏—Ä–∞–µ–º <p> —Ç–µ–≥–∏
#     return response
#
# def validate_html(html_content: str) -> str:
#     try:
#         tree = html.fromstring(html_content)
#         return html.tostring(tree, pretty_print=True).decode()
#     except (etree.XMLSyntaxError, etree.DocumentInvalid):
#         return "There was an error with the HTML formatting."
#
# def clean_html(response: str) -> str:
#     """–£–¥–∞–ª—è–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–µ–≥–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π HTML"""
#     tree = html.fromstring(response)  # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É HTML
#     # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–µ–≥–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, <p>, <div>
#     for elem in tree.xpath("//p | //div"):  # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ–≥–∏ <p> –∏ <div>
#         elem.getparent().remove(elem)
#
#     # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É
#     cleaned_html = html.tostring(tree, method='html').decode()
#     return cleaned_html


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command("help"))
async def cmd_help(message: Message):
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ask_count, pdf_used = db_service.get_user_limits(user_id)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    ask_remaining = max(0, ASK_LIMIT - ask_count)
    pdf_remaining = max(0, PDF_LIMIT - pdf_used)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –¥–æ —Å–±—Ä–æ—Å–∞
    hours_until_reset = db_service.get_time_until_reset(user_id)
    
    reset_text = f"‚è∞ –õ–∏–º–∏—Ç—ã —Å–±—Ä–æ—Å—è—Ç—Å—è —á–µ—Ä–µ–∑ {hours_until_reset} —á." if hours_until_reset else f"‚è∞ –õ–∏–º–∏—Ç—ã —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–µ {LIMIT_RESET_DAYS} –¥–Ω—è."
    
    help_text = (
        "üìå –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/ask - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
        "/check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –ø–¥—Ñ —Ñ–æ—Ä–º–∞—Ç–µ\n\n"
        
        f"üí¨ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {ask_remaining} –∏–∑ {ASK_LIMIT} –≤–æ–ø—Ä–æ—Å–æ–≤\n"
        f"üìÑ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {pdf_remaining} –∏–∑ {PDF_LIMIT} –ø—Ä–æ–≤–µ—Ä–æ–∫ PDF\n\n"
        
        f"{reset_text}"
    )
    await message.answer(help_text)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /ask ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(Command("ask"))
async def start_ask(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. "
                         "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel")
    await state.set_state(AskStates.waiting_for_question)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ—Ç–º–µ–Ω–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(Command("cancel"))
async def cancel_anytime(message: Message, state: FSMContext):
    if await state.get_state():
        await state.clear()
        
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ask_count, pdf_used = db_service.get_user_limits(user_id)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        ask_remaining = max(0, ASK_LIMIT - ask_count)
        pdf_remaining = max(0, PDF_LIMIT - pdf_used)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –¥–æ —Å–±—Ä–æ—Å–∞
        hours_until_reset = db_service.get_time_until_reset(user_id)
        
        reset_text = f"‚è∞ –õ–∏–º–∏—Ç—ã —Å–±—Ä–æ—Å—è—Ç—Å—è —á–µ—Ä–µ–∑ {hours_until_reset} —á." if hours_until_reset else f"‚è∞ –õ–∏–º–∏—Ç—ã —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–µ {LIMIT_RESET_DAYS} –¥–Ω—è."
        
        await message.answer(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
            "üìå –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
            "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            "/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
            "/ask - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
            "/cancel - –û—Ç–º–µ–Ω–∞\n"
            "/check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –ø–¥—Ñ —Ñ–æ—Ä–º–∞—Ç–µ\n\n"
            
            f"üí¨ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {ask_remaining} –∏–∑ {ASK_LIMIT} –≤–æ–ø—Ä–æ—Å–æ–≤\n"
            f"üìÑ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {pdf_remaining} –∏–∑ {PDF_LIMIT} –ø—Ä–æ–≤–µ—Ä–æ–∫ PDF\n\n"
            
            f"{reset_text}"
        )
    else:
        await message.answer("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(AskStates.waiting_for_question, F.text)
async def process_question(message: Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text.strip()

    # –ª–æ–≥–∏—Ä—É–µ–º
    db_service.save_message(user_id, text)

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
    ask_count, _ = db_service.get_user_limits(user_id)
    if ask_count >= ASK_LIMIT:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –¥–æ —Å–±—Ä–æ—Å–∞
        hours_until_reset = db_service.get_time_until_reset(user_id)
        reset_text = f"—á–µ—Ä–µ–∑ {hours_until_reset} —á" if hours_until_reset else f"—á–µ—Ä–µ–∑ {LIMIT_RESET_DAYS*24} —á–∞—Å–æ–≤."
        
        await message.answer(f"–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ {ASK_LIMIT} –≤–æ–ø—Ä–æ—Å–æ–≤. "
                             f"–í–∞—à –ª–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è {reset_text}. "
                             f"–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ @theother_archeee –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–î—É–º–∞—é..."
    thinking_msg = await message.answer("–î—É–º–∞—é...")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
    answer = await ask_openai(text, user_id)
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–î—É–º–∞—é..." –Ω–∞ –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
    await thinking_msg.edit_text(answer)

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    db_service.increment_ask(user_id)
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
    ask_count, pdf_used = db_service.get_user_limits(user_id)
    ask_remaining = max(0, ASK_LIMIT - ask_count)
    pdf_remaining = max(0, PDF_LIMIT - pdf_used)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –¥–æ —Å–±—Ä–æ—Å–∞
    hours_until_reset = db_service.get_time_until_reset(user_id)
    reset_text = f"‚è∞ –õ–∏–º–∏—Ç—ã —Å–±—Ä–æ—Å—è—Ç—Å—è —á–µ—Ä–µ–∑ {hours_until_reset} —á." if hours_until_reset else f"‚è∞ –õ–∏–º–∏—Ç—ã —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–µ {LIMIT_RESET_DAYS} –¥–Ω—è."
    
    commands_text = (
        "üìã <b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>\n"
        "/ask ‚Äî –ó–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å\n"
        "/check ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—è–≤–∫—É (PDF)\n"
        "/help ‚Äî –î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã\n\n"
        
        f"üí¨ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {ask_remaining} –∏–∑ {ASK_LIMIT} –≤–æ–ø—Ä–æ—Å–æ–≤\n"
        f"üìÑ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {pdf_remaining} –∏–∑ {PDF_LIMIT} –ø—Ä–æ–≤–µ—Ä–æ–∫ PDF\n\n"
        
        f"{reset_text}"
    )
    
    await message.answer(commands_text, parse_mode="HTML")

# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@router.message(StateFilter(default_state), F.text)
async def fallback_help(message: Message):
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ask_count, pdf_used = db_service.get_user_limits(user_id)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    ask_remaining = max(0, ASK_LIMIT - ask_count)
    pdf_remaining = max(0, PDF_LIMIT - pdf_used)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –¥–æ —Å–±—Ä–æ—Å–∞
    hours_until_reset = db_service.get_time_until_reset(user_id)
    
    reset_text = f"‚è∞ –õ–∏–º–∏—Ç—ã —Å–±—Ä–æ—Å—è—Ç—Å—è —á–µ—Ä–µ–∑ {hours_until_reset} —á." if hours_until_reset else f"‚è∞ –õ–∏–º–∏—Ç—ã —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–µ {LIMIT_RESET_DAYS} –¥–Ω—è."
    
    help_text = (
        "üìå –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/start ‚Äî –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help ‚Äî –°–ø—Ä–∞–≤–∫–∞\n"
        "/ask ‚Äî –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
        "/check ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—è–≤–∫—É (PDF)\n"
        "/cancel ‚Äî –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è\n\n"
        
        f"üí¨ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {ask_remaining} –∏–∑ {ASK_LIMIT} –≤–æ–ø—Ä–æ—Å–æ–≤\n"
        f"üìÑ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {pdf_remaining} –∏–∑ {PDF_LIMIT} –ø—Ä–æ–≤–µ—Ä–æ–∫ PDF\n\n"
        
        f"{reset_text}\n\n"
        
        "‚úâÔ∏è –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É ‚Äî —è –ø–æ–º–æ–≥—É!"
    )
    await message.answer(help_text)

@router.message(CheckStates.waiting_for_pdf)
async def handle_invalid_file(message: Message):
    await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ PDF‚Äë—Ñ–∞–π–ª –∑–∞—è–≤–∫–∏.")